generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  firstName           String?
  lastName            String?
  email               String               @unique
  password            String
  city                String?
  country             String?
  image               String?
  phone               String?
  secret              String?
  isVerified          Boolean              @default(false)
  status              Status               @default(ACTIVE)
  dob                 DateTime?
  isConnectedGoogle   Boolean?             @default(false)
  isValidPassword     Boolean             @default(false) //If user has a password
  attendees           Attendee[]
  blogs               Blog[]
  events              Event[]
  feedbacks           Feedback[]
  organizations       Organization[]
  userFavouriteEvents UserFavouriteEvent[]
  userFavouriteTopics UserFavouriteTopic[]
  tickets             Ticket[]             @relation("TicketToUser")
}

model UserFavouriteTopic {
  userId  Int
  topicId Int
  topic   Topic @relation(fields: [topicId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@unique([userId, topicId])
}

model UserFavouriteEvent {
  userId  Int
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
}

model Event {
  id                       Int                       @id @default(autoincrement())
  name                     String
  locationType             LocationType
  city                     String?
  country                  String?
  platform                 String?
  link                     String?
  description              String
  startDate                DateTime
  endDate                  DateTime
  status                   Status
  userId                   Int
  organizationId           Int?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  isPublic                 Boolean                   @default(true)
  isRequireApproval        Boolean
  isWaitlist               Boolean
  theme                    Theme
  Organization             Organization?             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventManagers            EventManager[]
  feedbacks                Feedback[]
  frequentlyAskedQuestions FrequentlyAskedQuestion[]
  sessions                 Session[]
  topics                   TopicsOfEvents[]
  userFavouriteEvents      UserFavouriteEvent[]
  Ticket                   Ticket[]
}

model FrequentlyAskedQuestion {
  id       Int    @id @default(autoincrement())
  evnetId  Int
  question String
  answer   String
  event    Event  @relation(fields: [evnetId], references: [id])
}

model EventManager {
  eventId   Int
  hostEmail String
  events    Event  @relation(fields: [eventId], references: [id])

  @@unique([eventId, hostEmail])
}

model Organization {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  phone       String
  email       String
  createdAt   DateTime @default(now())
  userId      Int
  events      Event[]
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Topic {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  numberOfEvents      Int                  @default(0)
  events              TopicsOfEvents[]
  userFavouriteTopics UserFavouriteTopic[]
}

model TopicsOfEvents {
  topicId Int
  eventId Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([topicId, eventId])
}

model Session {
  id          Int                   @id @default(autoincrement())
  name        String?               @default("Session")
  description String?
  hostName    String?
  eventId     Int
  startDate   DateTime
  endDate     DateTime
  Event       Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Blog {
  id        Int      @id @default(autoincrement())
  content   String
  title     String
  authorId  Int
  createdAt DateTime @default(now())
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Attendee {
  userId   Int
  ticketId Int
  Ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id(name: "attendeeId", [userId, ticketId])
}

model Ticket {
  id         Int        @id @default(autoincrement())
  ticketType TicketType
  name       String     @default("Ticket")
  isVisible  Boolean    @default(true)
  price      Int
  quantity   Int
  eventId    Int
  startDate  DateTime
  endDate    DateTime
  attendees  Attendee[]
  users      User[]     @relation("TicketToUser")
  Event      Event      @relation(fields: [eventId], references: [id])
}

model Feedback {
  id      Int    @id @default(autoincrement())
  content String
  userId  Int
  eventId Int
  Event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LocationType {
  OFFLINE
  ONLINE
}

enum TicketType {
  PAID
  DONATION
  FREE
}

enum Status {
  ACTIVE
  DISABLE
  PENDING
}

enum Theme {
  BLACK
  GREEN
  WHITE
  PINK
  YELLOW
  RED
}
