// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int             @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String          @unique
  password              String
  city                  String
  country               String
  dob                   DateTime?
  image                 String?
  phone                 String

  // in case account is disable 
  status                Status          @default(ACTIVE)         
  events                Event[]
  blogs                 Blog[]
  tickets               Ticket[]
  attendees             Attendee[]
  feedbacks             Feedback[]
  organizations         Organization[]
  userFavouriteTopics   UserFavouriteTopic[]
  userFavouriteEvents   UserFavouriteEvent[]
}

model UserFavouriteTopic {
  userId                Int
  topicId               Int
  user                  User                     @relation(fields: [userId], references: [id])
  topic                 Topic                   @relation(fields: [topicId], references: [id])

  @@unique([userId, topicId])
}

model UserFavouriteEvent {
  userId                Int
  eventId               Int
  user                  User            @relation(fields: [userId], references: [id])
  event                 Event           @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}


model Event {
  id                      Int                   @id @default(autoincrement())
  name                    String
  locationType            LocationType
  city                    String
  country                 String
  image                   String?
  description             String          
  startDate               DateTime
  endDate                 DateTime
  status                  Status
  userId                  Int
  organizationId          Int?                
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  isPublic                Boolean                @default(true)
  isRequireApproval       Boolean
  isWaitlist              Boolean
  timeZone                String
  theme                   Theme
  Organization            Organization?          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User                    User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topics                  TopicsOfEvents[]
  feedbacks               Feedback[]
  sessions                Session[]
  eventManagers           EventManager[]
  userFavouriteEvents     UserFavouriteEvent[]
  frequentlyAskedQuestions  FrequentlyAskedQuestion[]
}

model FrequentlyAskedQuestion {
  id                      Int                     @id @default(autoincrement())
  evnetId                 Int
  question                String
  answer                  String
  event                  Event                   @relation(fields: [evnetId], references: [id])                
}

model EventManager {
  eventId                 Int
  hostEmail               String
  events                  Event                   @relation(fields: [eventId], references: [id])
  @@unique([eventId, hostEmail])
}

model Organization {
  id            Int                     @id @default(autoincrement())
  name          String
  description   String  
  phone         String 
  email         String
  createdAt     DateTime                @default(now())
  userId        Int
  User          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  events        Event[]
}

// Example: Science, Education, Fashion, etc
model Topic {
  id                  Int                     @id @default(autoincrement())
  name                String                  @unique
  numberOfEvents      Int                     @default(0)
  events              TopicsOfEvents[]
  userFavouriteTopics UserFavouriteTopic[]
}

model TopicsOfEvents {
  topicId         Int
  eventId         Int
  topic           Topic                 @relation(fields: [topicId], references: [id], onDelete: Cascade)
  event           Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([topicId, eventId])
}

// for small sessions of a main event
model Session {
  id                  Int               @id @default(autoincrement())
  name                String
  description         String? 
  startDate           DateTime
  endDate             DateTime
  hostName            String?
  eventId             Int
  Event               Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Blog {
  id                Int                   @id @default(autoincrement())
  content           String
  title             String
  authorId          Int
  createdAt         DateTime              @default(now())
  User              User                  @relation(fields:[authorId], references:[id], onDelete: Cascade)
}

// for users' purchased tickets 
model Attendee {
  userId            Int
  ticketId          Int
  User              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Ticket            Ticket                @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@id([userId, ticketId])        
}

model Ticket {
  id                Int                   @id @default(autoincrement())
  ticketType        TicketType
  name              String                @default("Ticket")
  isVisible         Boolean               @default(true)
  price             Int
  quantity          Int
  startDate         DateTime
  endDate           DateTime
  eventId           Int
  attendees         Attendee[]
  users             User[] 
}

model Feedback {
  id                Int                   @id @default(autoincrement())
  content           String
  userId            Int
  eventId           Int
  User              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event             Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum LocationType {
  OFFLINE 
  ONLINE
}

enum TicketType {
  PAID
  DONATION
  FREE  
}

enum Status {
  ACTIVE
  DISABLE
  PENDING
}

enum Theme {
  BLACK
  GREEN
  WHITE
  PINK
  YELLOW
  RED
}
    